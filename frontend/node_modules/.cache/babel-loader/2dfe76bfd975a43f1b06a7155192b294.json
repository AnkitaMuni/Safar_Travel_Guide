{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nvar Masonry = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Masonry, _React$Component);\n  function Masonry() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n  var _proto = Masonry.prototype;\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    if (!this.state.hasDistributed && !this.props.sequential) this.distributeChildren();\n  };\n  Masonry.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    var children = props.children,\n      columnsCount = props.columnsCount;\n    if (state && children === state.children) return null;\n    return _extends({}, Masonry.getEqualCountColumns(children, columnsCount), {\n      children: children,\n      hasDistributed: false\n    });\n  };\n  _proto.distributeChildren = function distributeChildren() {\n    var _this = this;\n    var _this$props = this.props,\n      children = _this$props.children,\n      columnsCount = _this$props.columnsCount;\n    var columnHeights = Array(columnsCount).fill(0);\n    var isReady = this.state.childRefs.every(function (ref) {\n      return ref.current.getBoundingClientRect().height;\n    });\n    if (!isReady) return;\n    var columns = Array.from({\n      length: columnsCount\n    }, function () {\n      return [];\n    });\n    var validIndex = 0;\n    React.Children.forEach(children, function (child) {\n      if (child && React.isValidElement(child)) {\n        // .current is undefined if ref was passed to a functional component without forwardRef\n        // now passing ref into a wrapper div so it should always be defined\n        var childHeight = _this.state.childRefs[validIndex].current.getBoundingClientRect().height;\n        var minHeightColumnIndex = columnHeights.indexOf(Math.min.apply(Math, columnHeights));\n        columnHeights[minHeightColumnIndex] += childHeight;\n        columns[minHeightColumnIndex].push(child);\n        validIndex++;\n      }\n    });\n    this.setState(function (p) {\n      return _extends({}, p, {\n        columns: columns,\n        hasDistributed: true\n      });\n    });\n  };\n  Masonry.getEqualCountColumns = function getEqualCountColumns(children, columnsCount) {\n    var columns = Array.from({\n      length: columnsCount\n    }, function () {\n      return [];\n    });\n    var validIndex = 0;\n    var childRefs = [];\n    React.Children.forEach(children, function (child) {\n      if (child && React.isValidElement(child)) {\n        var ref = React.createRef();\n        childRefs.push(ref);\n        columns[validIndex % columnsCount].push(/*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"stretch\"\n          },\n          key: validIndex,\n          ref: ref\n        }, child) // React.cloneElement(child, {ref}) // cannot attach refs to functional components without forwardRef\n        );\n        validIndex++;\n      }\n    });\n    return {\n      columns: columns,\n      childRefs: childRefs\n    };\n  };\n  _proto.renderColumns = function renderColumns() {\n    var _this$props2 = this.props,\n      gutter = _this$props2.gutter,\n      itemTag = _this$props2.itemTag,\n      itemStyle = _this$props2.itemStyle;\n    return this.state.columns.map(function (column, i) {\n      return React.createElement(itemTag, {\n        key: i,\n        style: _extends({\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"flex-start\",\n          alignContent: \"stretch\",\n          flex: 1,\n          width: 0,\n          gap: gutter\n        }, itemStyle)\n      }, column.map(function (item) {\n        return item;\n      }));\n    });\n  };\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n      gutter = _this$props3.gutter,\n      className = _this$props3.className,\n      style = _this$props3.style,\n      containerTag = _this$props3.containerTag;\n    return React.createElement(containerTag, {\n      style: _extends({\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        alignContent: \"stretch\",\n        boxSizing: \"border-box\",\n        width: \"100%\",\n        gap: gutter\n      }, style),\n      className: className\n    }, this.renderColumns());\n  };\n  return Masonry;\n}(React.Component);\nMasonry.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  columnsCount: PropTypes.number,\n  gutter: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  containerTag: PropTypes.string,\n  itemTag: PropTypes.string,\n  itemStyle: PropTypes.object,\n  sequential: PropTypes.bool\n} : {};\nMasonry.defaultProps = {\n  columnsCount: 3,\n  gutter: \"0\",\n  className: null,\n  style: {},\n  containerTag: \"div\",\n  itemTag: \"div\",\n  itemStyle: {},\n  sequential: false\n};\nexport default Masonry;","map":null,"metadata":{},"sourceType":"module"}